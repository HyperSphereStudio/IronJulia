//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JuliaParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IronJulia.Parse {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class JuliaParser : BaseJuliaParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		StringStartEnd=1, LinOp=2, ProdOp=3, PowOp=4, CondOp=5, While=6, For=7, 
		Quote=8, Begin=9, If=10, ElseIf=11, Else=12, Cond=13, Dot=14, Comma=15, 
		Assign=16, Mutable=17, Abstract=18, ElementOf=19, Import=20, Using=21, 
		Struct=22, StmtTerminator=23, End=24, MacroName=25, NewLine=26, Skip=27, 
		RPar=28, LPar=29, MultiLineComment=30, LineComment=31, Name=32, Decimal_Int=33;
	public const int
		RULE_file_input = 0, RULE_stmt = 1, RULE_expr = 2, RULE_if = 3, RULE_elseIf = 4, 
		RULE_else = 5, RULE_assignable = 6, RULE_literal = 7, RULE_number = 8, 
		RULE_blockbody = 9;
	public static readonly string[] ruleNames = {
		"file_input", "stmt", "expr", "if", "elseIf", "else", "assignable", "literal", 
		"number", "blockbody"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\"'", null, null, null, null, "'while'", "'for'", "'quote'", "'begin'", 
		"'if'", "'elseif'", "'else'", "'?'", "'.'", "','", "'='", "'mutable'", 
		"'abstract'", "'::'", "'import'", "'using'", "'struct'", null, "'end'", 
		null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "StringStartEnd", "LinOp", "ProdOp", "PowOp", "CondOp", "While", 
		"For", "Quote", "Begin", "If", "ElseIf", "Else", "Cond", "Dot", "Comma", 
		"Assign", "Mutable", "Abstract", "ElementOf", "Import", "Using", "Struct", 
		"StmtTerminator", "End", "MacroName", "NewLine", "Skip", "RPar", "LPar", 
		"MultiLineComment", "LineComment", "Name", "Decimal_Int"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JuliaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JuliaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JuliaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JuliaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class File_inputContext : ParserRuleContext {
		public StmtContext blocks;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JuliaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public File_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterFile_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitFile_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_inputContext file_input() {
		File_inputContext _localctx = new File_inputContext(Context, State);
		EnterRule(_localctx, 0, RULE_file_input);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 20;
					_localctx.blocks = stmt();
					}
					} 
				}
				State = 25;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13186892992L) != 0)) {
				{
				State = 26;
				expr(0);
				}
			}

			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StmtTerminator() { return GetTokens(JuliaParser.StmtTerminator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StmtTerminator(int i) {
			return GetToken(JuliaParser.StmtTerminator, i);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==StmtTerminator) {
				{
				{
				State = 31;
				Match(StmtTerminator);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			expr(0);
			State = 39;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 38;
					Match(StmtTerminator);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoopExprContext : ExprContext {
		public IToken type;
		public ExprContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public BlockbodyContext blockbody() {
			return GetRuleContext<BlockbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JuliaParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JuliaParser.For, 0); }
		public LoopExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterLoopExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitLoopExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LinBOpExprContext : ExprContext {
		public ExprContext a;
		public IToken broadcast;
		public ExprContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LinOp() { return GetToken(JuliaParser.LinOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JuliaParser.Dot, 0); }
		public LinBOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterLinBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitLinBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinBOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public GetExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterGetExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitGetExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MacroExprContext : ExprContext {
		public IToken name;
		public ExprContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MacroName() { return GetToken(JuliaParser.MacroName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MacroExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterMacroExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitMacroExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunInvokeContext : ExprContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPar() { return GetToken(JuliaParser.RPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPar() { return GetToken(JuliaParser.LPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(JuliaParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JuliaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JuliaParser.Comma, i);
		}
		public FunInvokeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterFunInvoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitFunInvoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(JuliaParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext[] elseIf() {
			return GetRuleContexts<ElseIfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf(int i) {
			return GetRuleContext<ElseIfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public CondExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProdBOpExprContext : ExprContext {
		public ExprContext a;
		public IToken broadcast;
		public ExprContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ProdOp() { return GetToken(JuliaParser.ProdOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JuliaParser.Dot, 0); }
		public ProdBOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterProdBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitProdBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProdBOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPar() { return GetToken(JuliaParser.RPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPar() { return GetToken(JuliaParser.LPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JuliaParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JuliaParser.Comma, i);
		}
		public TupleExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : ExprContext {
		public AssignableContext key;
		public IToken broadcast;
		public IToken op;
		public ExprContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JuliaParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JuliaParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowOp() { return GetToken(JuliaParser.PowOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ProdOp() { return GetToken(JuliaParser.ProdOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LinOp() { return GetToken(JuliaParser.LinOp, 0); }
		public AssignExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondBOpExprContext : ExprContext {
		public ExprContext a;
		public IToken broadcast;
		public ExprContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CondOp() { return GetToken(JuliaParser.CondOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JuliaParser.Dot, 0); }
		public CondBOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterCondBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitCondBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondBOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowBOpExprContext : ExprContext {
		public ExprContext a;
		public IToken broadcast;
		public ExprContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowOp() { return GetToken(JuliaParser.PowOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JuliaParser.Dot, 0); }
		public PowBOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterPowBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitPowBOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowBOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new MacroExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				{
				State = 44;
				((MacroExprContext)_localctx).name = Match(MacroName);
				State = 48;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 45;
						((MacroExprContext)_localctx).args = expr(0);
						}
						} 
					}
					State = 50;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
				}
				break;
			case 2:
				{
				_localctx = new LoopExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 51;
				((LoopExprContext)_localctx).type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==While || _la==For) ) {
					((LoopExprContext)_localctx).type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 52;
				((LoopExprContext)_localctx).cond = expr(0);
				State = 53;
				blockbody();
				}
				}
				break;
			case 3:
				{
				_localctx = new CondExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 55;
				@if();
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ElseIf) {
					{
					{
					State = 56;
					elseIf();
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Else) {
					{
					State = 62;
					@else();
					}
				}

				State = 65;
				Match(End);
				}
				}
				break;
			case 4:
				{
				_localctx = new AssignExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67;
				((AssignExprContext)_localctx).key = assignable();
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Dot) {
					{
					State = 68;
					((AssignExprContext)_localctx).broadcast = Match(Dot);
					}
				}

				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) {
					{
					State = 71;
					((AssignExprContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) ) {
						((AssignExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 74;
				Match(Assign);
				State = 75;
				((AssignExprContext)_localctx).val = expr(5);
				}
				break;
			case 5:
				{
				_localctx = new GetExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77;
				assignable();
				}
				break;
			case 6:
				{
				_localctx = new FunInvokeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 78;
				((FunInvokeContext)_localctx).name = Match(Name);
				State = 79;
				Match(RPar);
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 80;
						expr(0);
						State = 81;
						Match(Comma);
						}
						} 
					}
					State = 87;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				State = 88;
				expr(0);
				State = 89;
				Match(LPar);
				}
				}
				break;
			case 7:
				{
				_localctx = new TupleExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91;
				Match(RPar);
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 92;
						expr(0);
						State = 93;
						Match(Comma);
						}
						} 
					}
					State = 99;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 100;
				expr(0);
				State = 101;
				Match(LPar);
				}
				break;
			case 8:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103;
				literal();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 130;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new PowBOpExprContext(new ExprContext(_parentctx, _parentState));
						((PowBOpExprContext)_localctx).a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 108;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Dot) {
							{
							State = 107;
							((PowBOpExprContext)_localctx).broadcast = Match(Dot);
							}
						}

						State = 110;
						Match(PowOp);
						State = 111;
						((PowBOpExprContext)_localctx).b = expr(10);
						}
						break;
					case 2:
						{
						_localctx = new ProdBOpExprContext(new ExprContext(_parentctx, _parentState));
						((ProdBOpExprContext)_localctx).a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 112;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 114;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Dot) {
							{
							State = 113;
							((ProdBOpExprContext)_localctx).broadcast = Match(Dot);
							}
						}

						State = 116;
						Match(ProdOp);
						State = 117;
						((ProdBOpExprContext)_localctx).b = expr(9);
						}
						break;
					case 3:
						{
						_localctx = new LinBOpExprContext(new ExprContext(_parentctx, _parentState));
						((LinBOpExprContext)_localctx).a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 118;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 120;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Dot) {
							{
							State = 119;
							((LinBOpExprContext)_localctx).broadcast = Match(Dot);
							}
						}

						State = 122;
						Match(LinOp);
						State = 123;
						((LinBOpExprContext)_localctx).b = expr(8);
						}
						break;
					case 4:
						{
						_localctx = new CondBOpExprContext(new ExprContext(_parentctx, _parentState));
						((CondBOpExprContext)_localctx).a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 124;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 126;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Dot) {
							{
							State = 125;
							((CondBOpExprContext)_localctx).broadcast = Match(Dot);
							}
						}

						State = 128;
						Match(CondOp);
						State = 129;
						((CondBOpExprContext)_localctx).b = expr(7);
						}
						break;
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ExprContext cond;
		public StmtContext stmts;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(JuliaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StmtTerminator() { return GetToken(JuliaParser.StmtTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 6, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(If);
			State = 136;
			_localctx.cond = expr(0);
			State = 137;
			Match(StmtTerminator);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13195281600L) != 0)) {
				{
				{
				State = 138;
				_localctx.stmts = stmt();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		public ExprContext cond;
		public StmtContext stmts;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ElseIf() { return GetToken(JuliaParser.ElseIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StmtTerminator() { return GetToken(JuliaParser.StmtTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterElseIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitElseIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(ElseIf);
			State = 145;
			_localctx.cond = expr(0);
			State = 146;
			Match(StmtTerminator);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13195281600L) != 0)) {
				{
				{
				State = 147;
				_localctx.stmts = stmt();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public StmtContext stmts;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(JuliaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StmtTerminator() { return GetToken(JuliaParser.StmtTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 10, RULE_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(Else);
			State = 154;
			Match(StmtTerminator);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13195281600L) != 0)) {
				{
				{
				State = 155;
				_localctx.stmts = stmt();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
	 
		public AssignableContext() { }
		public virtual void CopyFrom(AssignableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NameRefContext : AssignableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(JuliaParser.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(JuliaParser.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(JuliaParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(JuliaParser.Dot, i);
		}
		public NameRefContext(AssignableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterNameRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitNameRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignable);
		try {
			int _alt;
			_localctx = new NameRefContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 161;
					Match(Name);
					State = 162;
					Match(Dot);
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 168;
			Match(Name);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal_Int() { return GetToken(JuliaParser.Decimal_Int, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(Decimal_Int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockbodyContext : ParserRuleContext {
		public StmtContext stmts;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StmtTerminator() { return GetToken(JuliaParser.StmtTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(JuliaParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.EnterBlockbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJuliaParserListener typedListener = listener as IJuliaParserListener;
			if (typedListener != null) typedListener.ExitBlockbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJuliaParserVisitor<TResult> typedVisitor = visitor as IJuliaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockbodyContext blockbody() {
		BlockbodyContext _localctx = new BlockbodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_blockbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(StmtTerminator);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13195281600L) != 0)) {
				{
				{
				State = 175;
				_localctx.stmts = stmt();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,33,184,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,5,0,22,8,0,10,0,12,0,25,9,0,1,0,3,0,28,8,0,1,0,
		1,0,1,1,5,1,33,8,1,10,1,12,1,36,9,1,1,1,1,1,4,1,40,8,1,11,1,12,1,41,1,
		2,1,2,1,2,5,2,47,8,2,10,2,12,2,50,9,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,58,8,
		2,10,2,12,2,61,9,2,1,2,3,2,64,8,2,1,2,1,2,1,2,1,2,3,2,70,8,2,1,2,3,2,73,
		8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,84,8,2,10,2,12,2,87,9,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,96,8,2,10,2,12,2,99,9,2,1,2,1,2,1,2,1,2,
		3,2,105,8,2,1,2,1,2,3,2,109,8,2,1,2,1,2,1,2,1,2,3,2,115,8,2,1,2,1,2,1,
		2,1,2,3,2,121,8,2,1,2,1,2,1,2,1,2,3,2,127,8,2,1,2,1,2,5,2,131,8,2,10,2,
		12,2,134,9,2,1,3,1,3,1,3,1,3,5,3,140,8,3,10,3,12,3,143,9,3,1,4,1,4,1,4,
		1,4,5,4,149,8,4,10,4,12,4,152,9,4,1,5,1,5,1,5,5,5,157,8,5,10,5,12,5,160,
		9,5,1,6,1,6,5,6,164,8,6,10,6,12,6,167,9,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
		1,9,5,9,177,8,9,10,9,12,9,180,9,9,1,9,1,9,1,9,0,1,4,10,0,2,4,6,8,10,12,
		14,16,18,0,2,1,0,6,7,1,0,2,4,204,0,23,1,0,0,0,2,34,1,0,0,0,4,104,1,0,0,
		0,6,135,1,0,0,0,8,144,1,0,0,0,10,153,1,0,0,0,12,165,1,0,0,0,14,170,1,0,
		0,0,16,172,1,0,0,0,18,174,1,0,0,0,20,22,3,2,1,0,21,20,1,0,0,0,22,25,1,
		0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,26,28,3,
		4,2,0,27,26,1,0,0,0,27,28,1,0,0,0,28,29,1,0,0,0,29,30,5,0,0,1,30,1,1,0,
		0,0,31,33,5,23,0,0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,
		0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,39,3,4,2,0,38,40,5,23,0,0,39,38,1,0,
		0,0,40,41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,3,1,0,0,0,43,44,6,2,-1,
		0,44,48,5,25,0,0,45,47,3,4,2,0,46,45,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,
		0,48,49,1,0,0,0,49,105,1,0,0,0,50,48,1,0,0,0,51,52,7,0,0,0,52,53,3,4,2,
		0,53,54,3,18,9,0,54,105,1,0,0,0,55,59,3,6,3,0,56,58,3,8,4,0,57,56,1,0,
		0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,63,1,0,0,0,61,59,1,0,
		0,0,62,64,3,10,5,0,63,62,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,66,5,24,
		0,0,66,105,1,0,0,0,67,69,3,12,6,0,68,70,5,14,0,0,69,68,1,0,0,0,69,70,1,
		0,0,0,70,72,1,0,0,0,71,73,7,1,0,0,72,71,1,0,0,0,72,73,1,0,0,0,73,74,1,
		0,0,0,74,75,5,16,0,0,75,76,3,4,2,5,76,105,1,0,0,0,77,105,3,12,6,0,78,79,
		5,32,0,0,79,85,5,28,0,0,80,81,3,4,2,0,81,82,5,15,0,0,82,84,1,0,0,0,83,
		80,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,88,1,0,0,0,87,
		85,1,0,0,0,88,89,3,4,2,0,89,90,5,29,0,0,90,105,1,0,0,0,91,97,5,28,0,0,
		92,93,3,4,2,0,93,94,5,15,0,0,94,96,1,0,0,0,95,92,1,0,0,0,96,99,1,0,0,0,
		97,95,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,97,1,0,0,0,100,101,3,4,2,
		0,101,102,5,29,0,0,102,105,1,0,0,0,103,105,3,14,7,0,104,43,1,0,0,0,104,
		51,1,0,0,0,104,55,1,0,0,0,104,67,1,0,0,0,104,77,1,0,0,0,104,78,1,0,0,0,
		104,91,1,0,0,0,104,103,1,0,0,0,105,132,1,0,0,0,106,108,10,9,0,0,107,109,
		5,14,0,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,111,5,4,0,
		0,111,131,3,4,2,10,112,114,10,8,0,0,113,115,5,14,0,0,114,113,1,0,0,0,114,
		115,1,0,0,0,115,116,1,0,0,0,116,117,5,3,0,0,117,131,3,4,2,9,118,120,10,
		7,0,0,119,121,5,14,0,0,120,119,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,
		122,123,5,2,0,0,123,131,3,4,2,8,124,126,10,6,0,0,125,127,5,14,0,0,126,
		125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,5,5,0,0,129,131,3,
		4,2,7,130,106,1,0,0,0,130,112,1,0,0,0,130,118,1,0,0,0,130,124,1,0,0,0,
		131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,5,1,0,0,0,134,132,
		1,0,0,0,135,136,5,10,0,0,136,137,3,4,2,0,137,141,5,23,0,0,138,140,3,2,
		1,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,
		7,1,0,0,0,143,141,1,0,0,0,144,145,5,11,0,0,145,146,3,4,2,0,146,150,5,23,
		0,0,147,149,3,2,1,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,
		151,1,0,0,0,151,9,1,0,0,0,152,150,1,0,0,0,153,154,5,12,0,0,154,158,5,23,
		0,0,155,157,3,2,1,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,
		159,1,0,0,0,159,11,1,0,0,0,160,158,1,0,0,0,161,162,5,32,0,0,162,164,5,
		14,0,0,163,161,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,
		166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,32,0,0,169,13,1,0,0,0,170,171,
		3,16,8,0,171,15,1,0,0,0,172,173,5,33,0,0,173,17,1,0,0,0,174,178,5,23,0,
		0,175,177,3,2,1,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,
		179,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,5,24,0,0,182,19,1,
		0,0,0,23,23,27,34,41,48,59,63,69,72,85,97,104,108,114,120,126,130,132,
		141,150,158,165,178
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace IronJulia.Parse
