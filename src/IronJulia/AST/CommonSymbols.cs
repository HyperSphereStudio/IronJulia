namespace IronJulia.AST;

using static Base;

public class CommonSymbols {
    public static readonly Symbol empty_sym = "";
    public static readonly Symbol call_sym = "call";
    public static readonly Symbol invoke_sym = "invoke";
    public static readonly Symbol invoke_modify_sym = "invoke_modify";
    public static readonly Symbol foreigncall_sym = "foreigncall";
    public static readonly Symbol cfunction_sym = "cfunction";
    public static readonly Symbol quote_sym = "quote";
    public static readonly Symbol inert_sym = "inert";
    public static readonly Symbol top_sym = "top";
    public static readonly Symbol core_sym = "core";
    public static readonly Symbol globalref_sym = "globalref";
    public static readonly Symbol line_sym = "line";
    public static readonly Symbol lineinfo_sym = "lineinfo";
    public static readonly Symbol incomplete_sym = "incomplete";
    public static readonly Symbol error_sym = "error";
    public static readonly Symbol goto_sym = "goto";
    public static readonly Symbol gotoifnot_sym = "gotoifnot";
    public static readonly Symbol return_sym = "return";
    public static readonly Symbol lambda_sym = "lambda";
    public static readonly Symbol module_sym = "module";
    public static readonly Symbol export_sym = "export";
    public static readonly Symbol public_sym = "public";
    public static readonly Symbol assign_sym = "=";
    public static readonly Symbol method_sym = "method";
    public static readonly Symbol the_exception_sym = "the_exception";
    public static readonly Symbol enter_sym = "enter";
    public static readonly Symbol leave_sym = "leave";
    public static readonly Symbol pop_exception_sym = "pop_exception";
    public static readonly Symbol new_sym = "new";
    public static readonly Symbol splatnew_sym = "splatnew";
    public static readonly Symbol new_opaque_closure_sym = "new_opaque_closure";
    public static readonly Symbol opaque_closure_method_sym = "opaque_closure_method";
    public static readonly Symbol const_sym = "const";
    public static readonly Symbol global_sym = "global";
    public static readonly Symbol globaldecl_sym = "globaldecl";
    public static readonly Symbol local_sym = "local";
    public static readonly Symbol thunk_sym = "thunk";
    public static readonly Symbol toplevel_sym = "toplevel";
    public static readonly Symbol dot_sym = ".";
    public static readonly Symbol as_sym = "as";
    public static readonly Symbol colon_sym = ":";
    public static readonly Symbol boundscheck_sym = "boundscheck";
    public static readonly Symbol inbounds_sym = "inbounds";
    public static readonly Symbol newvar_sym = "newvar";
    public static readonly Symbol copyast_sym = "copyast";
    public static readonly Symbol loopinfo_sym = "loopinfo";
    public static readonly Symbol meta_sym = "meta";
    public static readonly Symbol list_sym = "list";
    public static readonly Symbol unused_sym = "#unused#";
    public static readonly Symbol slot_sym = "slot";
    public static readonly Symbol static_parameter_sym = "static_parameter";
    public static readonly Symbol inline_sym = "inline";
    public static readonly Symbol noinline_sym = "noinline";
    public static readonly Symbol polly_sym = "polly";
    public static readonly Symbol propagate_inbounds_sym = "propagate_inbounds";
    public static readonly Symbol aggressive_constprop_sym = "aggressive_constprop";
    public static readonly Symbol no_constprop_sym = "no_constprop";
    public static readonly Symbol purity_sym = "purity";
    public static readonly Symbol isdefined_sym = "isdefined";
    public static readonly Symbol nospecialize_sym = "nospecialize";
    public static readonly Symbol specialize_sym = "specialize";
    public static readonly Symbol nospecializeinfer_sym = "nospecializeinfer";
    public static readonly Symbol optlevel_sym = "optlevel";
    public static readonly Symbol compile_sym = "compile";
    public static readonly Symbol force_compile_sym = "force_compile";
    public static readonly Symbol infer_sym = "infer";
    public static readonly Symbol max_methods_sym = "max_methods";
    public static readonly Symbol macrocall_sym = "macrocall";
    public static readonly Symbol escape_sym = "escape";
    public static readonly Symbol hygienicscope_sym = "hygienic-scope";
    public static readonly Symbol gc_preserve_begin_sym = "gc_preserve_begin";
    public static readonly Symbol gc_preserve_end_sym = "gc_preserve_end";
    public static readonly Symbol generated_sym = "generated";
    public static readonly Symbol generated_only_sym = "generated_only";
    public static readonly Symbol throw_undef_if_not_sym = "throw_undef_if_not";
    public static readonly Symbol getfield_undefref_sym = "##getfield##";
    public static readonly Symbol do_sym = "do";
    public static readonly Symbol code_coverage_effect_sym = "code_coverage_effect";
    public static readonly Symbol aliasscope_sym = "aliasscope";
    public static readonly Symbol popaliasscope_sym = "popaliasscope";
    public static readonly Symbol thismodule_sym = "thismodule";
    public static readonly Symbol eval_sym = "eval";
    public static readonly Symbol include_sym = "include";
    public static readonly Symbol block_sym = "block";
    public static readonly Symbol atom_sym = "atom";
    public static readonly Symbol statement_sym = "statement";
    public static readonly Symbol all_sym = "all";
    public static readonly Symbol atomic_sym = "atomic";
    public static readonly Symbol not_atomic_sym = "not_atomic";
    public static readonly Symbol unordered_sym = "unordered";
    public static readonly Symbol monotonic_sym = "monotonic";
    public static readonly Symbol acquire_sym = "acquire";
    public static readonly Symbol release_sym = "release";
    public static readonly Symbol acquire_release_sym = "acquire_release";
    public static readonly Symbol sequentially_consistent_sym = "sequentially_consistent";
    public static readonly Symbol uninferred_sym = "uninferred";
    public static readonly Symbol latestworld_sym = "latestworld";
    
    
}